# Generated by Django 4.2.6 on 2023-12-27 21:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='GlobalSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('due_date', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(30)])),
                ('grace_period', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(30)])),
            ],
        ),
        migrations.CreateModel(
            name='LeaseHolder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lease_holder_first_name', models.CharField(max_length=200)),
                ('lease_holder_last_name', models.CharField(max_length=200)),
                ('lease_holder_address', models.CharField(max_length=200)),
                ('email', models.CharField(max_length=200)),
                ('phone', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Lot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_number', models.IntegerField(unique=True)),
                ('lot_address', models.CharField(max_length=300)),
                ('occupied', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Lease',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monthly_rental_amount', models.IntegerField()),
                ('due_date', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(30)])),
                ('grace_period', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(30)])),
                ('lease_agreement_path', models.FileField(upload_to='lease_agreements/')),
                ('lot_image_path', models.FileField(upload_to='images/')),
                ('payment_status', models.CharField(choices=[('up-to-date', 'Up to date'), ('less-than-7', 'Less than 7 days overdue'), ('over-7', 'Over 7 days overdue')], default='less-than-7', max_length=20)),
                ('lease_holder', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='lots.leaseholder')),
                ('lot', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lots.lot')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.PositiveSmallIntegerField(choices=[(1, 'staff'), (2, 'customer')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_date', models.DateField(help_text='Date of payment')),
                ('payment_amount', models.DecimalField(decimal_places=2, help_text='Amount paid', max_digits=10)),
                ('payment_method', models.CharField(choices=[('Cash', 'Cash'), ('Credit Card', 'Credit Card'), ('Bank Transfer', 'Bank Transfer')], help_text='Method of payment', max_length=50)),
                ('transaction_id', models.CharField(blank=True, help_text='Transaction ID if available', max_length=200, null=True)),
                ('notes', models.TextField(blank=True, help_text='Any additional notes or information about the payment', null=True)),
                ('receipt', models.FileField(blank=True, help_text='Scanned image or PDF of the payment receipt', null=True, upload_to='payment_receipts/')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When the payment record was created')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When the payment record was last updated')),
                ('is_deleted', models.BooleanField(default=False, help_text='Soft delete flag to mark record as deleted without actually removing it')),
                ('lease', models.ForeignKey(help_text='The lease the payment is for', on_delete=django.db.models.deletion.CASCADE, to='lots.lease')),
            ],
            options={
                'indexes': [models.Index(fields=['payment_date'], name='lots_paymen_payment_de74a7_idx')],
            },
        ),
    ]
